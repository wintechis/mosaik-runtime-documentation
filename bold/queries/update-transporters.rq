PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX ldp: <http://www.w3.org/ns/ldp#>
PREFIX arena: <https://solid.ti.rw.fau.de/public/ns/arena#>
PREFIX sim: <http://ti.rw.fau.de/sim#>

# Set transporter to busy when task available and idle
DELETE {
    GRAPH ?transporter {
        ?transporter arena:status arena:idle .
    }
} INSERT {
    GRAPH ?transporter {
        ?transporter arena:status arena:busy .
    }
} WHERE {
    ?transporter a arena:Transporter ;
        arena:status arena:idle ;
        arena:tasks ?taskContainer .

    ?taskContainer ldp:contains ?task .

    GRAPH ?task{
    	?someTask a arena:TransporterTask ;
            rdf:value ?goalTile .
    }
};

# Set transporter to idle when no task available and busy
DELETE {
    GRAPH ?transporter {
        ?transporter arena:status arena:busy .
    }
} INSERT {
    GRAPH ?transporter {
        ?transporter arena:status arena:idle .
    }
} WHERE {
    ?transporter a arena:Transporter ;
        arena:status arena:busy ;
        arena:tasks ?taskContainer .

    FILTER NOT EXISTS {
        ?taskContainer ldp:contains ?task .
    }
};

# If a transporter has a task that is currently not executable, delete it
DELETE {
    GRAPH ?taskContainer {
        ?taskContainer ldp:contains ?task .
    }
    GRAPH ?task {
        ?someTask a arena:TransporterTask ;
            rdf:value ?goalTile .
    }
} WHERE {
    ?transporter a arena:Transporter ;
        arena:tasks ?taskContainer .

    ?taskContainer ldp:contains ?task .

    GRAPH ?task{
    	?someTask a arena:TransporterTask ;
            rdf:value ?goalTile .
    }

    FILTER NOT EXISTS {
        ?transporter ?direction ?goalTile .
    }
};

# If a transporter has a task that goes out of bounds, delete it
DELETE {
    GRAPH ?taskContainer {
        ?taskContainer ldp:contains ?task .
    }
    GRAPH ?task {
        ?someTask a arena:TransporterTask ;
            rdf:value ?goalTile .
    }
} WHERE {
    ?transporter a arena:Transporter ;
        arena:tasks ?taskContainer .

    ?taskContainer ldp:contains ?task .

    GRAPH ?task{
    	?someTask a arena:TransporterTask ;
            rdf:value arena:nil .
    }
};

# If transporter is on tile that tasks wants, delete task
DELETE {
    GRAPH ?taskContainer {
        ?taskContainer ldp:contains ?task .
    }
    GRAPH ?task {
        ?someTask a arena:TransporterTask ;
            rdf:value ?tile .
    }
} WHERE {
    ?transporter a arena:Transporter ;
        arena:tasks ?taskContainer ;
        arena:tile ?tile .

    ?taskContainer ldp:contains ?task .

    GRAPH ?task{
    	?someTask a arena:TransporterTask ;
            rdf:value ?tile .
    }
};

# Transporter moves
DELETE {
    GRAPH ?transporter {
        ?transporter arena:locationX ?x ;
            arena:locationY ?y ;
            arena:tile ?t ;
            arena:tileN ?t1 ;
            arena:tileNE ?t2 ;
            arena:tileE ?t3 ;
            arena:tileSE ?t4 ;
            arena:tileS ?t5 ;
            arena:tileSW ?t6 ;
            arena:tileW ?t7 ;
            arena:tileNW ?t8 .
    }
    GRAPH ?taskContainer {
        ?taskContainer ldp:contains ?task .
    }
    GRAPH ?task {
        ?someTask a arena:TransporterTask ;
            rdf:value ?goalTile .
    }
} INSERT {
    GRAPH ?transporter {
        ?transporter arena:locationX ?newX ;
            arena:locationY ?newY ;
            arena:tile ?tile .
    }
} WHERE {
    ?transporter a arena:Transporter ;
        arena:status arena:busy ;
        arena:tasks ?taskContainer ;
        arena:locationX ?x ;
        arena:locationY ?y ;
        arena:tile ?t ;
        ?direction ?goalTile .

    OPTIONAL {
        ?transporter arena:tileN ?t1 .
    }
    OPTIONAL {
        ?transporter arena:tileNE ?t2 .
    }
    OPTIONAL {
         ?transporter arena:tileE ?t3 .
    }
    OPTIONAL {
        ?transporter arena:tileSE ?t4 .
    }
    OPTIONAL {
        ?transporter arena:tileS ?t5 .
    }
    OPTIONAL {
        ?transporter arena:tileSW ?t6 .
    }
    OPTIONAL {
        ?transporter arena:tileW ?t7 .
    }
    OPTIONAL {
        ?transporter arena:tileNW ?t8 .
    }

    VALUES (?direction ?dx ?dy) {
        (arena:tileN 0 -1)
        (arena:tileNE 1 -1)
        (arena:tileE 1 0)
        (arena:tileSE 1 1)
        (arena:tileS 0 1)
        (arena:tileSW -1 1)
        (arena:tileW -1 0)
        (arena:tileNW -1 -1)
    }

    ?taskContainer ldp:contains ?task .

    GRAPH ?task{
    	?someTask a arena:TransporterTask ;
            rdf:value ?goalTile .
    }


    ?shopfloor a arena:Shopfloor ;
        arena:sizeX ?sizeX ;
        arena:sizeY ?sizeY .

    FILTER(?newX < ?sizeX && ?newX >= 0)
    BIND(?x + ?dx AS ?newX)

    FILTER(?newY < ?sizeY && ?newY >= 0)
    BIND(?y + ?dy AS ?newY)

    BIND(URI(CONCAT("/shopfloor/",xsd:string(?newX),"/",xsd:string(?newY))) AS ?tile)
};

# Set new neighboring tiles for transporter
INSERT {
    GRAPH ?transporter {
        ?transporter arena:tileN ?tile .
    }
} WHERE {
    {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        BIND(?y - 1 AS ?yMinus1)

        BIND(URI(CONCAT("/shopfloor/",xsd:string(?x),"/",xsd:string(?yMinus1))) AS ?tile)
        FILTER(?yMinus1 >= 0)
    # When there is no tile set to nil
    } UNION {
        ?transporter a arena:Transporter ;
            arena:locationY ?y .

        BIND(?y - 1 AS ?yMinus1)

        BIND(arena:nil AS ?tile)
        FILTER(?yMinus1 < 0)
    }
};

INSERT {
    GRAPH ?transporter {
        ?transporter arena:tileNE ?tile .
    }
} WHERE {
    {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeX ?sizeX .


        BIND(?y - 1 AS ?yMinus1)
        BIND(?x + 1 AS ?xPlus1)

        BIND(URI(CONCAT("/shopfloor/",xsd:string(?xPlus1),"/",xsd:string(?yMinus1))) AS ?tile)

        FILTER(?yMinus1 >= 0 && ?xPlus1 < ?sizeX)
    } UNION {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeX ?sizeX ;
            arena:sizeY ?sizeY .


        BIND(?y - 1 AS ?yMinus1)
        BIND(?x + 1 AS ?xPlus1)

        BIND(arena:nil AS ?tile)
        FILTER(?yMinus1 < 0 || ?xPlus1 >= ?sizeX)
    }
};

INSERT {
    GRAPH ?transporter {
        ?transporter arena:tileE ?tile .
    }
} WHERE {
    {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeX ?sizeX .

        BIND(?x + 1 AS ?xPlus1)

        BIND(URI(CONCAT("/shopfloor/",xsd:string(?xPlus1),"/",xsd:string(?y))) AS ?tile)

        FILTER(?xPlus1 < ?sizeX)
    } UNION {
        ?transporter a arena:Transporter ;
            arena:locationX ?x .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeX ?sizeX .

        BIND(?x + 1 AS ?xPlus1)

        BIND(arena:nil AS ?tile)
        FILTER(?xPlus1 >= ?sizeX)

    }
};

INSERT {
    GRAPH ?transporter {
        ?transporter arena:tileSE ?tile .
    }
} WHERE {
    {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeX ?sizeX ;
            arena:sizeY ?sizeY .

        BIND(?y + 1 AS ?yPlus1)
        BIND(?x + 1 AS ?xPlus1)

        BIND(URI(CONCAT("/shopfloor/",xsd:string(?xPlus1),"/",xsd:string(?yPlus1))) AS ?tile)

        FILTER(?yPlus1 < ?sizeY && ?xPlus1 < ?sizeX)
    } UNION {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeX ?sizeX ;
            arena:sizeY ?sizeY .

        BIND(?y + 1 AS ?yPlus1)
        BIND(?x + 1 AS ?xPlus1)

        FILTER(?yPlus1 >= ?sizeY || ?xPlus1 >= ?sizeX)
    }
};

INSERT {
    GRAPH ?transporter {
        ?transporter arena:tileS ?tile .
    }
} WHERE {
    {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeX ?sizeX ;
            arena:sizeY ?sizeY .

        BIND(?y + 1 AS ?yPlus1)

        BIND(URI(CONCAT("/shopfloor/",xsd:string(?x),"/",xsd:string(?yPlus1))) AS ?tile)

        FILTER(?yPlus1 < ?sizeY)
    } UNION {
        ?transporter a arena:Transporter ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeY ?sizeY .

        BIND(?y + 1 AS ?yPlus1)

        FILTER(?yPlus1 >= ?sizeY)

        BIND(arena:nil AS ?tile)
    }
};

INSERT {
    GRAPH ?transporter {
        ?transporter arena:tileSW ?tile .
    }
} WHERE {
    {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeY ?sizeY .

        BIND(?y + 1 AS ?yPlus1)
        BIND(?x - 1 AS ?xMinus1)

        BIND(URI(CONCAT("/shopfloor/",xsd:string(?xMinus1),"/",xsd:string(?yPlus1))) AS ?tile)

        FILTER(?yPlus1 < ?sizeY && ?xMinus1 >= 0)
    } UNION {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        ?shopfloor a arena:Shopfloor ;
            arena:sizeY ?sizeY .


        BIND(?y + 1 AS ?yPlus1)
        BIND(?x - 1 AS ?xMinus1)

        BIND(arena:nil AS ?tile)
        FILTER(?yPlus1 >= ?sizeY || ?xMinus1 < 0)
    }
};

INSERT {
    GRAPH ?transporter {
        ?transporter arena:tileW ?tile .
    }
} WHERE {
    {
        ?transporter a arena:Transporter ;
            arena:locationX ?x .

        BIND(?x - 1 AS ?xMinus1)

        BIND(URI(CONCAT("/shopfloor/",xsd:string(?xMinus1),"/",xsd:string(?y))) AS ?tile)

        FILTER(?xMinus1 >= 0)
    } UNION {
        ?transporter a arena:Transporter ;
            arena:locationX ?x .

        BIND(?x - 1 AS ?xMinus1)

        BIND(arena:nil AS ?tile)
        FILTER(?xMinus1 < 0)

    }
};

INSERT {
    GRAPH ?transporter {
        ?transporter arena:tileNW ?tile .
    }
} WHERE {
    {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        BIND(?y - 1 AS ?yMinus1)
        BIND(?x - 1 AS ?xMinus1)

        BIND(URI(CONCAT("/shopfloor/",xsd:string(?xMinus1),"/",xsd:string(?yMinus1))) AS ?tile)

        FILTER(?yMinus1 >= 0 && ?xMinus1 >= 0)
    } UNION {
        ?transporter a arena:Transporter ;
            arena:locationX ?x ;
            arena:locationY ?y .

        BIND(?y - 1 AS ?yMinus1)
        BIND(?x - 1 AS ?xMinus1)

        BIND(arena:nil AS ?tile)
        FILTER(?yMinus1 < 0 || ?xMinus1 < 0)
    }
};

# Tranporter picks up product from output port
DELETE {
    GRAPH ?station {
        ?port arena:products ?product .
    }
} INSERT {
    GRAPH ?transporter {
        ?transporter arena:products ?product .
    }
} WHERE {
    ?transporter a arena:Transporter ;
        arena:locationX ?x ;	
        arena:locationY ?y .

    ?station a arena:Workstation ;
        arena:outputPort ?port .

    ?port arena:locationX ?x ;	
        arena:locationY ?y ;
        arena:products ?product .

    FILTER NOT EXISTS {
        ?transporter arena:products ?p .
    }
};

# Transporter puts products to input ports if it fits to station
DELETE {
    GRAPH ?transporter {
        ?transporter arena:products ?product .
    }
} INSERT {
    GRAPH ?station {
        ?port arena:products ?product .
    }
} WHERE {
    ?transporter a arena:Transporter ;
        arena:locationX ?x ;	
        arena:locationY ?y ;
        arena:products ?product .

    ?station a arena:Workstation ;
        arena:color ?color ;
        arena:inputPort ?port .

    ?port arena:locationX ?x ;	
        arena:locationY ?y .

    ?product arena:color ?color .
};
