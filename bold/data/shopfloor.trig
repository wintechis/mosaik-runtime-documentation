@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix arena: <https://solid.ti.rw.fau.de/public/ns/arena#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ldp: <http://www.w3.org/ns/ldp#> .

#define the root of our scenario, where stations, transporters and the shopfloor lie
</> {
    </> a ldp:BasicContainer ;
        ldp:contains </stations>,
                     </transporters>,
                     </shopfloor> .
}

#endpoint for checking how many products of every kind (red/blue/gree/yellow) were delivered
#this counter is update on delivery in bold/queries/update-stations.rq
</productsDelivered> {
    </productsDelivered> arena:hasCounter [
        arena:color arena:red ;
        rdf:value 0
    ], [
        arena:color arena:blue ;
        rdf:value 0
    ], [
        arena:color arena:green ;
        rdf:value 0
    ], [
        arena:color arena:yellow ;
        rdf:value 0
    ] .
}

#the colors for stations and products
</colors> {
    arena:red a arena:Color .
    arena:blue a arena:Color .
    arena:yellow a arena:Color .
    arena:green a arena:Color .
}

#the different kind of stations together in an ldp container
</stations> {
    </stations> a ldp:BasicContainer ;
        ldp:contains </stations/green>,
                     </stations/blue>,
                     </stations/red>,
                     </stations/yellow> .
}

#the initalization for the GREEN station with position and its input / output ports for interaction with the transporter
#we define the ports to be at the same position as the station itself, such that the complete workstation is localted on exactly one tile 
</stations/green> {
    </stations/green> a arena:Workstation ;
        arena:tile </shopfloor/1/1> ;
        arena:locationX 1 ;
        arena:locationY 1 ;
        arena:inputPort [
            a arena:Port ;
            arena:locationX 1 ;
            arena:locationY 1 ;
        ] ;
        arena:outputPort [
            a arena:Port ;
            arena:locationX 1 ;
            arena:locationY 1
        ] ;
        arena:color arena:green ;
        arena:eventContainer </stations/green/events> .
}

</stations/green/events> {
    </stations/green/events> a ldp:DirectContainer .
}

#the initalization for the BLUE station with position and its input / output ports for interaction with the transporter
#we define the ports to be at the same position as the station itself, such that the complete workstation is localted on exactly one tile 
</stations/blue> {
    </stations/blue> a arena:Workstation ;
        arena:tile </shopfloor/1/5> ;
        arena:locationX 1 ;
        arena:locationY 5 ;
        arena:inputPort [
            a arena:Port ;
            arena:locationX 1 ;
            arena:locationY 5
        ] ;
        arena:outputPort [
            a arena:Port ;
            arena:locationX 1 ;
            arena:locationY 5
        ] ;
        arena:color arena:blue ;
        arena:eventContainer </stations/blue/events> .
}

</stations/blue/events> {
    </stations/blue/events> a ldp:DirectContainer .
}

#the initalization for the RED station with position and its input / output ports for interaction with the transporter
#we define the ports to be at the same position as the station itself, such that the complete workstation is localted on exactly one tile 
</stations/red> {
    </stations/red> a arena:Workstation ;
        arena:tile </shopfloor/5/5> ;
        arena:locationX 5 ;
        arena:locationY 5 ;
        arena:inputPort [
            a arena:Port ;
            arena:locationX 5 ;
            arena:locationY 5
        ] ;
        arena:outputPort [
            a arena:Port ;
            arena:locationX 5 ;
            arena:locationY 5
        ] ;
        arena:color arena:red ;
        arena:eventContainer </stations/red/events> .
}

</stations/red/events> {
    </stations/red/events> a ldp:DirectContainer .
}

#the initalization for the YELLOW station with position and its input / output ports for interaction with the transporter
#we define the ports to be at the same position as the station itself, such that the complete workstation is localted on exactly one tile 
</stations/yellow> {
    </stations/yellow> a arena:Workstation ;
        arena:tile </shopfloor/5/1> ;
        arena:locationX 5 ;
        arena:locationY 1 ;
        arena:inputPort [
            a arena:Port ;
            arena:locationX 5 ;
            arena:locationY 1
        ] ;
        arena:outputPort [
            a arena:Port ;
            arena:locationX 5 ;
            arena:locationY 1
        ] ;
        arena:color arena:yellow ;
        arena:eventContainer </stations/yellow/events> .
}

</stations/yellow/events> {
    </stations/yellow/events> a ldp:DirectContainer .
}

#the URIs for all used transporters
</transporters> {
    </transporters> a ldp:BasicContainer ;
        ldp:contains </transporters/1>,
                     </transporters/2>,
                     </transporters/3>.
#                     </transporters/4>,
#                     </transporters/5>,
#                     </transporters/6>,
#                     </transporters/7>,
#                     </transporters/8> .
}

#initial information for a transporter (all others in the same manner)
#initial position is calculated by /bold/queries/init.rq
</transporters/1> {
    </transporters/1> a arena:Transporter ;
        arena:status arena:idle ;
        arena:speed 1 ;
        arena:products arena:nil ;
        arena:capacity 1 ;
        arena:tasks </transporters/1/tasks> .
}

#the transporter's task container gathers all movement tasks received from the agent. The transporter will try to fulfill all tasks,
#but will do a sanity check and delete tasks that cannot be done.
</transporters/1/tasks> {
    </transporters/1/tasks> a ldp:BasicContainer .
}

</transporters/2> {
    </transporters/2> a arena:Transporter ;
        arena:status arena:idle ;
        arena:speed 1 ;
        arena:products arena:nil ;
        arena:capacity 1 ;
        arena:tasks </transporters/2/tasks> .
}

</transporters/2/tasks> {
    </transporters/2/tasks> a ldp:BasicContainer .
}

</transporters/3> {
    </transporters/3> a arena:Transporter ;
        arena:status arena:idle ;
        arena:speed 1 ;
        arena:products arena:nil ;
        arena:capacity 1 ;
        arena:tasks </transporters/3/tasks> .
}

</transporters/3/tasks> {
    </transporters/3/tasks> a ldp:BasicContainer .
}

#</transporters/4> {
#    </transporters/4> a arena:Transporter ;
#        arena:status arena:idle ;
#        arena:speed 1 ;
#        arena:products arena:nil ;
#        arena:capacity 1 ;
#        arena:tasks </transporters/4/tasks> .
#}
#
#</transporters/4/tasks> {
#    </transporters/4/tasks> a ldp:BasicContainer .
#}
#
#</transporters/5> {
#    </transporters/5> a arena:Transporter ;
#        arena:status arena:idle ;
#        arena:speed 1 ;
#        arena:products arena:nil ;
#        arena:capacity 1 ;
#        arena:tasks </transporters/5/tasks> .
#}
#
#</transporters/5/tasks> {
#    </transporters/5/tasks> a ldp:BasicContainer .
#}
#
#</transporters/6> {
#    </transporters/6> a arena:Transporter ;
#        arena:status arena:idle ;
#        arena:speed 1 ;
#        arena:products arena:nil ;
#        arena:capacity 1 ;
#        arena:tasks </transporters/6/tasks> .
#}
#
#</transporters/6/tasks> {
#    </transporters/6/tasks> a ldp:BasicContainer .
#}
#
#</transporters/7> {
#    </transporters/7> a arena:Transporter ;
#        arena:status arena:idle ;
#        arena:speed 1 ;
#        arena:products arena:nil ;
#        arena:capacity 1 ;
#        arena:tasks </transporters/7/tasks> .
#}
#
#</transporters/7/tasks> {
#    </transporters/7/tasks> a ldp:BasicContainer .
#}
#
#</transporters/8> {
#    </transporters/8> a arena:Transporter ;
#        arena:status arena:idle ;
#        arena:speed 1 ;
#        arena:products arena:nil ;
#        arena:capacity 1 ;
#        arena:tasks </transporters/8/tasks> .
#}
#
#</transporters/8/tasks> {
#    </transporters/8/tasks> a ldp:BasicContainer .
#}

#the definition of the shopfloor size, used for calculation of the area and all tiles
</shopfloor> {
    </shopfloor> a arena:Shopfloor ;
        arena:sizeX 7 ;
        arena:sizeY 7 .
}
